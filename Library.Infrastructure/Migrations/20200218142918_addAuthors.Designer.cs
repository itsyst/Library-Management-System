// <auto-generated />
using System;
using Library.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200218142918_addAuthors")]
    partial class addAuthors
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Domain.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(55)")
                        .HasMaxLength(55);

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Laurelli Rolf"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jordan B Peterson"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Annmarie Palm"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dale Carnegie"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bo Gustafsson"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Brian Tracy "
                        },
                        new
                        {
                            Id = 7,
                            Name = "Stephen Denning"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Geoff Watts"
                        },
                        new
                        {
                            Id = 9,
                            Name = "David J Anderson"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Rashina Hoda"
                        },
                        new
                        {
                            Id = 11,
                            Name = "William Shakespeare"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Villiam Skakspjut"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Robert C. Martin"
                        });
                });

            modelBuilder.Entity("Library.Domain.BookCopy", b =>
                {
                    b.Property<int>("BookCopyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DetailsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.HasKey("BookCopyId");

                    b.HasIndex("DetailsId");

                    b.ToTable("BookCopies");

                    b.HasData(
                        new
                        {
                            BookCopyId = 1,
                            DetailsId = 1,
                            IsAvailable = true
                        },
                        new
                        {
                            BookCopyId = 2,
                            DetailsId = 1,
                            IsAvailable = true
                        },
                        new
                        {
                            BookCopyId = 3,
                            DetailsId = 1,
                            IsAvailable = true
                        },
                        new
                        {
                            BookCopyId = 4,
                            DetailsId = 3,
                            IsAvailable = true
                        },
                        new
                        {
                            BookCopyId = 5,
                            DetailsId = 2,
                            IsAvailable = true
                        },
                        new
                        {
                            BookCopyId = 6,
                            DetailsId = 3,
                            IsAvailable = true
                        },
                        new
                        {
                            BookCopyId = 7,
                            DetailsId = 3,
                            IsAvailable = true
                        },
                        new
                        {
                            BookCopyId = 8,
                            DetailsId = 3,
                            IsAvailable = true
                        });
                });

            modelBuilder.Entity("Library.Domain.BookCopyLoan", b =>
                {
                    b.Property<int>("BookCopyId")
                        .HasColumnType("int");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.HasKey("BookCopyId", "LoanId");

                    b.HasIndex("LoanId");

                    b.ToTable("BookCopyLoans");
                });

            modelBuilder.Entity("Library.Domain.BookDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.ToTable("BookDetails");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AuthorID = 1,
                            Description = "Arguably Shakespeare's greatest tragedy",
                            ISBN = "1472518381",
                            Title = "Hamlet"
                        },
                        new
                        {
                            ID = 2,
                            AuthorID = 1,
                            Description = "King Lear is a tragedy written by William Shakespeare. It depicts the gradual descent into madness of the title character, after he disposes of his kingdom by giving bequests to two of his three daughters egged on by their continual flattery, bringing tragic consequences for all.",
                            ISBN = "9780141012292",
                            Title = "King Lear"
                        },
                        new
                        {
                            ID = 3,
                            AuthorID = 2,
                            Description = "An intense drama of love, deception, jealousy and destruction.",
                            ISBN = "1853260185",
                            Title = "Othello"
                        });
                });

            modelBuilder.Entity("Library.Domain.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fee")
                        .HasColumnType("int");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LoanId");

                    b.HasIndex("MemberID");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            LoanId = 1,
                            DueDate = new DateTime(2020, 3, 3, 15, 29, 18, 25, DateTimeKind.Local).AddTicks(2222),
                            Fee = 0,
                            MemberID = 3,
                            ReturnDate = new DateTime(2020, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 2, 18, 15, 29, 18, 22, DateTimeKind.Local).AddTicks(1250)
                        },
                        new
                        {
                            LoanId = 2,
                            DueDate = new DateTime(2020, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fee = 0,
                            MemberID = 1,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LoanId = 3,
                            DueDate = new DateTime(2020, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fee = 0,
                            MemberID = 2,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LoanId = 4,
                            DueDate = new DateTime(2020, 3, 3, 15, 29, 18, 25, DateTimeKind.Local).AddTicks(4823),
                            Fee = 0,
                            MemberID = 2,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 2, 18, 15, 29, 18, 25, DateTimeKind.Local).AddTicks(4820)
                        });
                });

            modelBuilder.Entity("Library.Domain.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Daniel Graham",
                            SSN = "555666-0001"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Eric Howell",
                            SSN = "555666-0002"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Patricia Lebsack",
                            SSN = "555666-0003"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kalle Runolfsdottir",
                            SSN = "555666-0004"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Linus Reichert",
                            SSN = "555666-0005"
                        });
                });

            modelBuilder.Entity("Library.Domain.BookCopy", b =>
                {
                    b.HasOne("Library.Domain.BookDetails", "Details")
                        .WithMany("Copies")
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Domain.BookCopyLoan", b =>
                {
                    b.HasOne("Library.Domain.BookCopy", "BookCopy")
                        .WithMany("BookCopyLoans")
                        .HasForeignKey("BookCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Loan", "Loan")
                        .WithMany("BookCopyLoans")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Domain.BookDetails", b =>
                {
                    b.HasOne("Library.Domain.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Domain.Loan", b =>
                {
                    b.HasOne("Library.Domain.Member", "Member")
                        .WithMany("Loans")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
